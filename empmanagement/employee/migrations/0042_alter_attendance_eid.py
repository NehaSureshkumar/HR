# Generated by Django 5.0.14 on 2025-06-17 11:28

import django.db.models.deletion
from django.db import migrations, models

def convert_eid_to_employee(apps, schema_editor):
    Attendance = apps.get_model('employee', 'Attendance')
    Employee = apps.get_model('employee', 'Employee')
    db_alias = schema_editor.connection.alias
    
    # Get all unique eId values from Attendance
    attendance_records = Attendance.objects.using(db_alias).all()
    
    for record in attendance_records:
        try:
            # Try to find the employee
            employee = Employee.objects.using(db_alias).get(eID=record.eId)
            # Create a new attendance record with the correct foreign key
            Attendance.objects.using(db_alias).create(
                id=record.id,
                eId=employee,
                date=record.date,
                time_in=record.time_in,
                time_out=record.time_out,
                status=record.status,
                overtime_hours=record.overtime_hours,
                location=record.location,
                is_remote=record.is_remote,
                notes=record.notes,
                created_at=record.created_at,
                updated_at=record.updated_at,
                is_late=record.is_late,
                auto_clocked_out=record.auto_clocked_out,
                shift=record.shift,
                is_adjusted=record.is_adjusted,
                adjusted_by=record.adjusted_by,
                adjustment_reason=record.adjustment_reason,
                adjustment_date=record.adjustment_date,
                leave_approved_by=record.leave_approved_by,
                leave_approval_date=record.leave_approval_date,
                leave_approval_notes=record.leave_approval_notes
            )
        except Employee.DoesNotExist:
            # If employee doesn't exist, delete the attendance record
            record.delete()

def reverse_convert(apps, schema_editor):
    # This is not needed as we're converting to ForeignKey
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('employee', '0041_attendance_leave_approval_date_and_more'),
    ]

    operations = [
        # First, remove the unique constraint if it exists
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together=set(),
        ),
        # Create a temporary field to store the employee ID
        migrations.AddField(
            model_name='attendance',
            name='temp_eid',
            field=models.CharField(max_length=20, null=True),
        ),
        # Copy the eId value to temp_eid
        migrations.RunSQL(
            "UPDATE employee_attendance SET temp_eid = eId;",
            reverse_sql="UPDATE employee_attendance SET eId = temp_eid;"
        ),
        # Remove the old eId field
        migrations.RemoveField(
            model_name='attendance',
            name='eId',
        ),
        # Add the new eId field as ForeignKey
        migrations.AddField(
            model_name='attendance',
            name='eId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='employee.employee'),
        ),
        # Run the data migration
        migrations.RunPython(convert_eid_to_employee, reverse_convert),
        # Make the eId field required
        migrations.AlterField(
            model_name='attendance',
            name='eId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='employee.employee'),
        ),
        # Remove the temporary field
        migrations.RemoveField(
            model_name='attendance',
            name='temp_eid',
        ),
        # Add back the unique constraint
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together={('eId', 'date')},
        ),
    ]
